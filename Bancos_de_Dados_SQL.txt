Banco de dados relacional

Um Banco de Dados composto por tabelas, tabelas são compostas por colunas
e colunas possuem linhas(tuplas) que são os registros. O relacionamento entre essas
tabelas é composto por chaves primarias e chaves estrangeiras.

C - Create
R - READ
U - .UPDATE
D - DELETE

Características

- Relacionamento entre tabelas
- Linguagem de consulta Estruturada (SQL)
- Integridade referencial
- Normalização de dados
- Segurança
- Flexibilidade e Extensibilidade
- Suporte a transações ACID

Transações ACID

- Conjunto de propriedade de um banco de dado relacional, que garante que as transações sejam executadas
de forma segura e confiável. Para que as informações permaneçam sempre consistentes.

A - Atomicidade - Todos as operações sejam executadas com sucesso ou nenhuma seja executada.
C - Consistência - Garantia de sair de um estado consistente para outro estado consistente.
I - Isolamento - Cada transações é executada de forma isolada sem interferir nas transações concorrentes.
D - Durabilidade - Uma vez que a transação é confirmada, essa alteração de informações é permanente.

Organização do SQL

- DQL - Linguagem de Consulta de Dados
 - SELECT
- DML - Linguagem de Manipulação de Dados
 - INSERT, UPDATE e DELETE
- DDL - Linguagem de definição de Dados
 - CREATE, ALTER, DROP
- DCL - Linguagem de Controle de Dados
 - GRANT, REVOKE
- DTL - Linguagem de Transações de Dados
 - BEGIN, COMMIT, ROLLBACK

 MER e DER - Modelagem de Banco de Dados Relacionais

 MER - MODELO de ENTIDADE-RELACIONAMENTO é representado através de diagramas chamados Diagramas ENTIDADE-RELACIONAMENTO (DER)
    Modelo conceitual usado para representar a estrutura geral do banco de dados, descreve as entidades, atributos e relacionamentos, sem entrar em muitos detalhes de implementação.

DER - Representação gráfica desse modelo (MER) com símbolos e convenções pra representar a estidades, atributos, relacionamentos e cardinalidades dos relacionamentos.

Entidade - Representação das tabelas -  Nomeadas sempre com substantivos concretos ou abstratos que representam de forma clara sua função do sistema
    - Representada por retângulos

Atributos - características ou propriedades das entidades
    - Representadas por Elipses ou por "Blocos" abaixo da Entidade - Anotação da UML

Relacionamentos - Os relacionamentos representam as associações entre entidades
    - Representadas por losangos com linhas ligadas e com nome do que esse relacionamento realiza

Cardinalidade - Forma como as entidades se relacionam umas com as outras indica o numero máximo de instancias ou ocorrências que temos de uma entidade com outra
    - Relacionamento 1..1 (um para um)
    - Relacionamento 1..n ou 1..* (um para muitos)
    - Relacionamento n..n ou *..*(muitos para muitos)
    - Relacionamento 0,n (relacionamento não obrigatório)

Estrutura do comando INSERT:

INSERT INTO /*Clausula obrigatória*/

    {{nome-tabela}}

    ([coluna1,coluna2,...]) /*Pode ocultar os nomes das colunas*/

VALUES

    ([valor-coluna1, valor-coluna2,...])

Estrutura do Comando: SELECT

SELECT (lista_colunas)  ou *  que seleciona todas as colunas

FROM tabela;

Estrutura do SELECT com WHERE

SELECT (lista_colunas)

FROM tabela

WHERE(condição)

#condições:
    = igualdade
    <> ou != desigualdade
    > maior que
    < menor que
    >= maior ou igual que
    <= menor ou igual que
    LIKE comparação de padrões
    IN pertence a uma lista de valores
    BETWEEN dentro de um intervalo
    AND e lógico
    OR ou lógico

Estrutura de comando UPDATE

UPDATE (tabela)

SET 

    (coluna_1) = (novo_valor_1),
    (coluna_2) = (novo_valor_2)

WHERE
    (condição);

Estrutura de comando DELETE

DELETE FROM
    
    (tabela)

WHERE
    (condição)


Alterando e excluindo tabelas

DROP TABLE - remove tabela de forma permanente

    DROP TABLE (nome_tabela);

ALTER TABLE - modifica a estrutura de uma tabela existente
    permite:
        adicionar, alterar ou excluir colunas
        modificar as restrições, indices
        renomear a tabela entre outras alterações

Chaves Primárias - É um atributo ou um conjunto de atributos que identifica, de forma exclusiva, cada registro da tabela
Garantir a Integridade dos dados, impede a duplicação de registros e sempre ajuda na recuperação eficiente dessa informação.
    - identifica exclusivamente
    - Não pode conter valores nulos (NULL)
    - Uma tabela pode ter apenas uma chave Primárias

Criação de chaves Primárias

- Momento de criação da tabela

    CREATE TABLE {{nome_tabela}} (
        id INT PRIMARY KEY AUTOINCREMENT,
        ...);

- Tabela ja criada sem Primary KEY

    ALTER TABLE {{nome_tabela}}
    MODIFY COLUMN id INT PRIMARY KEY;

Chaves Estrangeiras - é responsável por estabelecer a relação com outras tabelas,
    - pode ser nula (NULL)
    - é possível ter mais de uma em uma Tabela

Criação de chaves estrangeiras

- Momento da criação da tabela

    CREATE TABLE {{nome_tabela}}(
        id INT PRIMARY KEY AUTOINCREMENT
        chave_estrangeira INT,
        FOREING KEY (chave_estrangeira) REFERENCES {{outra_tabela}}(id)
    );

- Tabela ja criada

    ALTER TABLE {{nome_tabela}}
    ADD CONSTRAINT {{nome_constraint}}
    FOREING KEY (id)
    REFERENCES{{outra_tabela}}(id)

- Restrições

    - ON DELETE: Especifica o que acontece com os registros dependentes quando um registro pai é excluído.
    - ON UPDATE: Define o comportamento dos registros dependentes quando um registro pai é atualizado
    - CASCADE, SET NULL, SET DEFAULT RESTRICT

Normalização de Dados
    É um processo no qual se organiza e estrutura um banco de Dados relacional de forma a eliminar redundâncias
    e anomalias, garantindo a consistência e integridade dos dados

Formas Normais - 1º Forma normal - 1FN
    Cada valor em uma tabela deve ser indivisível. Nenhum campo deve conter múltiplos valores ou listas.

Exemplo 1FN utilizando o comando SUBSTRING_INDEX na tabela endereco para separar em colunas diferentes
os dados do endereco do usuário

update viagem.usuarios
set rua = substring_index(substring_index(endereco,',',1),',',-1),
	numero = substring_index(substring_index(endereco,',',2),',',-1),
    cidade = substring_index(substring_index(endereco,',',3),',',-1),
    estado = substring_index(endereco,',',-1);

ALTER TABLE viagem.usuarios
DROP COLUMN endereco;

Formas Normais - Segunda Forma Normal - 2FN
    A 2FN estabelece que uma tabela deve estar na 1FN.
    Todos os atributos não chave devem depender totalmente da chave primária.
    * Se a chave primária é simples possivelmente a tabela ja se encontra na 2FN

Formas Normais - Terceira Forma Normal - 3FN
    Uma tabela deve estar na 2FN
    Nenhuma coluna não-chave depender de outra coluna não-chave.

CONSULTAS COM JUNÇÕES e SUBCONSULTAS

JUNÇÕES - JOINS
    São usadas no SQL para combinar dados de duas ou mais tabelas relacionadas em uma única consulta

    - INNER JOIN
    - LEFT JOIN ou LEFT OUTER JOIN
    - RIGHT JOIN ou RIGHT OUTER JOIN
    - FULL JOIN ou FULL OUTER JOIN

    --INNER JOIN
        Retorna apenas as linhas que têm correspondência em ambas as tabelas envolvidas na junção. A junção é
        feita com base em uma condição de igualdade especificada na cláusula ON.
        ex:
        SELECT * FROM tabela1
        INNER JOIN tabela2 ON tabla1.coluna = tabela2.coluna;
